name: Build, Test, and Push to AWS ECR

on:
  push:
    branches: [ "main" ]

env:
  # Backend image repository name in ECR, e.g., blockpulse-service
  AWS_REGION: ${{ vars.AWS_REGION }}
  SERVICE_NAME: ${{ vars.SERVICE_NAME }}
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}

jobs:
  test:
    name: Run unit and integration tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Run tests (Maven verify)
        run: ./mvnw -B -ntp clean verify -DskipTests

  build-and-push:
    name: Build and push Docker image to ECR
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      id-token: write
    outputs:
      image-uri: ${{ steps.set-image.outputs.image-uri }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract short SHA
        id: vars
        run: echo "sha_short=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          ECR_REGISTRY=${{ env.ECR_REGISTRY }}
          TAG=${{ steps.vars.outputs.sha_short }}
          docker buildx build --platform linux/amd64 -t $ECR_REGISTRY:$TAG -t $ECR_REGISTRY:latest .

      - name: Push Docker image
        run: |
          ECR_REGISTRY=${{ env.ECR_REGISTRY }}
          docker push $ECR_REGISTRY --all-tags

      - name: Set image output
        id: set-image
        run: |
          ECR_REGISTRY=${{ env.ECR_REGISTRY }}
          TAG=${{ steps.vars.outputs.sha_short }}
          echo "image-uri=$ECR_REGISTRY:$TAG"
          echo "image-uri=$ECR_REGISTRY:$TAG" >> $GITHUB_OUTPUT

  deploy-infrastructure:
    name: Deploy CloudFormation stack
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Debug image URI
        run: |
          echo "Image URI: ${{ needs.build-and-push.outputs.image-uri }}"

      - name: Install AWS CLI (act only)
        if: ${{ env.ACT }}
        run: |
          apt-get update && apt-get install -y unzip curl
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          ./aws/install


      - name: Check ECR image URI
        run: |
          if [ -z "${{ needs.build-and-push.outputs.image-uri }}" ]; then
            echo "ECR image URI is missing"
            exit 1
          fi

      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --template-file infrastructure/apprunner-service.yaml \
            --stack-name "${{ env.SERVICE_NAME }}" \
            --parameter-overrides \
              ECRImageURI=${{ needs.build-and-push.outputs.image-uri }} \
              ServiceName=${{ env.SERVICE_NAME }} \
              Environment=prod \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      - name: Get Service URL
        run: |
          SERVICE_URL=$(aws cloudformation describe-stacks \
            --stack-name "${{ env.SERVICE_NAME }}" \
            --query 'Stacks[0].Outputs[?OutputKey==`ServiceUrl`].OutputValue' \
            --output text)
          echo "ðŸš€ Application deployed at: $SERVICE_URL"